@page "/attractions/details/{id}"
@using EncoreTix.Application.Features.Attractions.Services
@using EncoreTix.Application.Features.Events.Services
@using EncoreTix.Core.Models
@inject IEventsService eventsService
@inject IAttractionsService attractionsService
@inject NavigationManager NavigationManager

<PageTitle>Attraction Details</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (attraction == null)
{
    <MudText>No details available for this attraction.</MudText>
}
else
{
    <MudContainer>
        <MudCard>
            <MudCardMedia Image="@(attraction.Images?.FirstOrDefault()?.Url)" Height=400 />
            <MudCardContent>
                <div class="d-flex justify-content-between align-items-center">
                    <MudText Typo="Typo.h4">@attraction.Name</MudText>
                    <div class="d-flex gap-2">
                        <MudIconButton Color="Color.Primary" OnClick="() => OpenExternalLink(attraction.ExternalLinks?.Facebook?.FirstOrDefault()?.Url)">
                            <img src="images/facebook.svg" alt="Facebook" width="24" height="24" />
                        </MudIconButton>
                        <MudIconButton Color="Color.Primary" OnClick="() => OpenExternalLink(attraction.ExternalLinks?.Instagram?.FirstOrDefault()?.Url)">
                            <img src="images/instagram.svg" alt="Instagram" width="24" height="24" />
                        </MudIconButton>
                        <MudIconButton Color="Color.Primary" OnClick="() => OpenExternalLink(attraction.ExternalLinks?.Twitter?.FirstOrDefault()?.Url)">
                            <img src="images/twitter.svg" alt="Twitter" width="24" height="24" />
                        </MudIconButton>
                        <MudIconButton Color="Color.Primary" OnClick="() => OpenExternalLink(attraction.ExternalLinks?.Homepage?.FirstOrDefault()?.Url)">
                            <img src="images/website.svg" alt="Website" width="24" height="24" />
                        </MudIconButton>
                    </div>
                </div>

                <MudDivider Class="my-2" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="GoBack">Back to Attractions</MudButton>
            </MudCardActions>
        </MudCard>

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h5" GutterBottom="true">Upcoming Events</MudText>

        @if (events != null && events.Any())
        {
            <MudGrid>
                @foreach (var ev in events)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard>
                            <MudCardMedia Image="@(ev.Images?.FirstOrDefault()?.Url)" Height=200 />
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@ev.Dates?.Start?.FormattedLocalDate</MudText>
                                <MudText Typo="Typo.h6">@ev.Name</MudText>
                                <MudText Typo="Typo.body2">@ev.SingleVenue?.Name, @ev.SingleVenue?.City?.Name, @ev.SingleVenue?.State?.StateCode</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudText>No events available for this attraction.</MudText>
        }
    </MudContainer>
}

@code {
    [Parameter] public string id { get; set; } = string.Empty;

    private Attraction? attraction;
    private IEnumerable<Event>? events;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAttractionDetails();
    }

    private async Task LoadAttractionDetails()
    {
        isLoading = true;

        attraction = await attractionsService.GetAttraction(id);

        if (attraction != null)
        {
            events = await eventsService.GetEvents(attraction.Id);
        }

        isLoading = false;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/"); // Navigate back to the main page
    }

    private void NavigateToEvent(string eventId)
    {
        NavigationManager.NavigateTo($"/events/details/{eventId}");
    }

    private void OpenExternalLink(string? url)
    {
        if (!string.IsNullOrEmpty(url))
        {
            NavigationManager.NavigateTo(url, forceLoad: true);
        }
    }
}
